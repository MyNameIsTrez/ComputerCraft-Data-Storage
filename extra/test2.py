import cv2
import numpy as np
import time

from scipy.spatial.distance import sqeuclidean as sqdistance

name = "extra/small"
img = cv2.imread(name + ".png")

def rgb2gray(imgArg):
	g = []
	row, col, channel = imgArg.shape
	for i in range(row):
		for j in range(col):
			# numpy stores RGB as BGR (flipped)
			a = (imgArg[i,j,0]*0.07 + imgArg[i,j,1]*0.72 + imgArg[i,j,2]*0.21)
			g.append(a)
	return np.array(g)

color_palette = (
	(
		161,
		206,
		143
	),
	(
		240,
		235,
		23
	),
	(
		122,
		54,
		68
	),
	(
		38,
		154,
		210
	),
	(
		122,
		156,
		191
	),
	(
		136,
		235,
		198
	),
	(
		225,
		2,
		170
	),
	(
		246,
		96,
		206
	),
	(
		254,
		124,
		166
	),
	(
		150,
		218,
		99
	),
	(
		203,
		123,
		245
	),
	(
		147,
		119,
		210
	),
	(
		97,
		13,
		187
	),
	(
		216,
		67,
		13
	),
	(
		116,
		79,
		213
	),
	(
		7,
		32,
		189
	),
	(
		65,
		222,
		131
	),
	(
		139,
		72,
		32
	),
	(
		222,
		153,
		166
	),
	(
		29,
		91,
		142
	),
	(
		178,
		3,
		129
	),
	(
		113,
		9,
		3
	),
	(
		171,
		71,
		223
	),
	(
		91,
		111,
		6
	),
	(
		235,
		219,
		143
	),
	(
		68,
		150,
		201
	),
	(
		166,
		72,
		80
	),
	(
		0,
		201,
		125
	),
	(
		123,
		231,
		100
	),
	(
		172,
		160,
		143
	),
	(
		180,
		251,
		94
	),
	(
		9,
		136,
		225
	),
	(
		255,
		46,
		148
	),
	(
		39,
		167,
		41
	),
	(
		70,
		58,
		101
	),
	(
		95,
		146,
		70
	),
	(
		113,
		188,
		33
	),
	(
		31,
		160,
		17
	),
	(
		253,
		182,
		80
	),
	(
		6,
		163,
		213
	),
	(
		12,
		31,
		228
	),
	(
		251,
		230,
		117
	),
	(
		163,
		15,
		228
	),
	(
		22,
		66,
		42
	),
	(
		207,
		64,
		73
	),
	(
		52,
		242,
		7
	),
	(
		50,
		145,
		242
	),
	(
		5,
		71,
		178
	),
	(
		233,
		137,
		46
	),
	(
		185,
		138,
		127
	),
	(
		47,
		37,
		64
	),
	(
		163,
		66,
		1
	),
	(
		104,
		211,
		61
	),
	(
		73,
		86,
		79
	),
	(
		124,
		12,
		201
	),
	(
		127,
		250,
		163
	),
	(
		75,
		67,
		219
	),
	(
		168,
		233,
		104
	),
	(
		104,
		33,
		124
	),
	(
		93,
		91,
		65
	),
	(
		187,
		131,
		182
	),
	(
		210,
		30,
		148
	),
	(
		158,
		124,
		103
	),
	(
		177,
		60,
		169
	),
	(
		191,
		239,
		198
	),
	(
		120,
		144,
		47
	),
	(
		94,
		149,
		40
	),
	(
		97,
		205,
		193
	),
	(
		44,
		51,
		134
	),
	(
		229,
		175,
		56
	),
	(
		170,
		75,
		109
	),
	(
		221,
		33,
		80
	),
	(
		234,
		85,
		225
	),
	(
		76,
		109,
		180
	),
	(
		63,
		220,
		2
	),
	(
		154,
		84,
		46
	),
	(
		218,
		89,
		73
	),
	(
		97,
		131,
		19
	),
	(
		85,
		124,
		111
	),
	(
		94,
		255,
		222
	),
	(
		225,
		31,
		27
	),
	(
		90,
		19,
		33
	),
	(
		145,
		85,
		209
	),
	(
		144,
		222,
		9
	),
	(
		81,
		65,
		47
	),
	(
		241,
		237,
		92
	),
	(
		244,
		66,
		67
	),
	(
		215,
		229,
		56
	),
	(
		211,
		182,
		35
	),
	(
		84,
		168,
		206
	),
	(
		192,
		192,
		89
	),
	(
		219,
		106,
		226
	),
	(
		236,
		92,
		254
	),
	(
		168,
		18,
		17
	)
)

# print(img)
print("img shape: {}".format(img.shape))

t1 = time.time()

# row, col, channel = img.shape
# gr = rgb2gray(img).reshape(row, col) # 132s

# numpy stores RGB as BGR (flipped)
# img[:,:,0] is equal to taking all rows and all colums, but only the first index
# gr = img[:,:,0]*0.07 + img[:,:,1]*0.72 + img[:,:,2]*0.21 # 0.30s

# print("A")
# print(img[:,:,:3].shape)
# print("B")

rows, cols, channel = img.shape
distances = np.array([np.array([(img[row,col,0] - color[0]) ** 2 + (img[row,col,1] - color[1]) ** 2 + (img[row,col,2] - color[2]) ** 2 for color in color_palette]).argmin() for row in range(rows) for col in range(cols)])

# [[i for i in range(5)] for j in range(10)]

# print(distances)
print("distances shape: {}".format(distances.shape))
# print(index)

# print(gr)
# print("gr shape: {}".format(gr.shape))

# cv2.imwrite(name + "-gray.png", gr)

print("dt: {:.2f}s".format(time.time() - t1))